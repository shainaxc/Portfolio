{"ast":null,"code":"/* eslint-disable consistent-return */\nimport { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom.js';\nimport { now, nextTick } from '../../shared/utils.js';\nexport default function Mousewheel(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on,\n    emit\n  } = _ref;\n  const window = getWindow();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: 'container',\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = now();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n\n  function normalize(e) {\n    // Reasonable defaults\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0; // spinX, spinY\n\n    let pX = 0;\n    let pY = 0; // pixelX, pixelY\n    // Legacy\n\n    if ('detail' in e) {\n      sY = e.detail;\n    }\n\n    if ('wheelDelta' in e) {\n      sY = -e.wheelDelta / 120;\n    }\n\n    if ('wheelDeltaY' in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n\n    if ('wheelDeltaX' in e) {\n      sX = -e.wheelDeltaX / 120;\n    } // side scrolling on FF with DOMMouseScroll\n\n\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in e) {\n      pY = e.deltaY;\n    }\n\n    if ('deltaX' in e) {\n      pX = e.deltaX;\n    }\n\n    if (e.shiftKey && !pX) {\n      // if user scrolls with shift he wants horizontal scroll\n      pX = pY;\n      pY = 0;\n    }\n\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    } // Fall-back if spin cannot be determined\n\n\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n\n  function handleMouseEnter() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = true;\n  }\n\n  function handleMouseLeave() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = false;\n  }\n\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      // Prevent if delta of wheel scroll delta is below configured threshold\n      return false;\n    }\n\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      // Prevent if time between scrolls is below configured threshold\n      return false;\n    } // If the movement is NOT big enough and\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n    //   Don't go any further (avoid insignificant scroll movement).\n\n\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n      // Return false as a default\n      return true;\n    } // If user is scrolling towards the end:\n    //   If the slider hasn't hit the latest slide or\n    //   if the slider is a loop and\n    //   if the slider isn't moving right now:\n    //     Go to next slide and\n    //     emit a scroll event.\n    // Else (the user is scrolling towards the beginning) and\n    // if the slider hasn't hit the first slide or\n    // if the slider is a loop and\n    // if the slider isn't moving right now:\n    //   Go to prev slide and\n    //   emit a scroll event.\n\n\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit('scroll', newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit('scroll', newEvent.raw);\n    } // If you got here is because an animation has been triggered so store the current time\n\n\n    lastScrollTime = new window.Date().getTime(); // Return false as a default\n\n    return false;\n  }\n\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      // Return true to animate scroll on edges\n      return true;\n    }\n\n    return false;\n  }\n\n  function handle(event) {\n    let e = event;\n    let disableParentSwiper = true;\n    if (!swiper.enabled) return;\n    const params = swiper.params.mousewheel;\n\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarget);\n    }\n\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n\n    if (delta === 0) return true;\n    if (params.invert) delta = -delta; // Get the scroll positions\n\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:\n    //     the disableParentSwiper will be true.\n    // When loop is false:\n    //     if the scroll positions is not on edge,\n    //     then the disableParentSwiper will be true.\n    //     if the scroll on edge positions,\n    //     then the disableParentSwiper will be false.\n\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      // Register the new event in a variable which stores the relevant data\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event\n      }; // Keep the most recent events\n\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift(); // only store the last N events\n      }\n\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:\n      //   If direction has changed or\n      //   if the scroll is quicker than the previous one:\n      //     Animate the slider.\n      // Else (this is the first time the wheel is moved):\n      //     Animate the slider.\n\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      } // If it's time to release the scroll:\n      //   Return now so you don't hit the preventDefault.\n\n\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      // Freemode or scrollContainer:\n      // If we recently snapped after a momentum scroll, then ignore wheel events\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n      // or if it's a new scroll (larger delta or inverse sign as last event before\n      // an end-of-momentum snap).\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = undefined;\n\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n\n        if (swiper.params.freeMode.sticky) {\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\n          // 1. do all N events have decreasing or same (absolute value) delta?\n          // 2. did all N events arrive in the last M (M=500?) msecs?\n          // 3. does the earliest event have an (absolute value) delta that's\n          //    at least P (P=1?) larger than the most recent event's delta?\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n          // Snap immediately and ignore remaining wheel events in this scroll.\n          // See comment above for \"remaining wheel events in this scroll\" determination.\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n          clearTimeout(timeout);\n          timeout = undefined;\n\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\n            // to wait for more events. Snap ASAP on the next tick.\n            // Also, because there's some remaining momentum we'll bias the snap in the\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\n            // if it's already scrolled more than 20% in the current direction, keep going.\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 0); // no delay; move on next tick\n          }\n\n          if (!timeout) {\n            // if we get here, then we haven't detected the end of a momentum scroll, so\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\n            // for 500ms.\n            timeout = nextTick(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 500);\n          }\n        } // Emit event\n\n\n        if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay\n\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions\n\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n      }\n    }\n\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    return false;\n  }\n\n  function events(method) {\n    let target = swiper.$el;\n\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarget);\n    }\n\n    target[method]('mouseenter', handleMouseEnter);\n    target[method]('mouseleave', handleMouseLeave);\n    target[method]('wheel', handle);\n  }\n\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener('wheel', handle);\n      return true;\n    }\n\n    if (swiper.mousewheel.enabled) return false;\n    events('on');\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n\n    if (!swiper.mousewheel.enabled) return false;\n    events('off');\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n\n  on('init', () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n\n    if (swiper.params.mousewheel.enabled) enable();\n  });\n  on('destroy', () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n\n    if (swiper.mousewheel.enabled) disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}","map":{"version":3,"sources":["C:/xampp/htdocs/melayyyyyyyy/node_modules/swiper/modules/mousewheel/mousewheel.js"],"names":["getWindow","$","now","nextTick","Mousewheel","_ref","swiper","extendParams","on","emit","window","mousewheel","enabled","releaseOnEdges","invert","forceToAxis","sensitivity","eventsTarget","thresholdDelta","thresholdTime","timeout","lastScrollTime","lastEventBeforeSnap","recentWheelEvents","normalize","e","PIXEL_STEP","LINE_HEIGHT","PAGE_HEIGHT","sX","sY","pX","pY","detail","wheelDelta","wheelDeltaY","wheelDeltaX","axis","HORIZONTAL_AXIS","deltaY","deltaX","shiftKey","deltaMode","spinX","spinY","pixelX","pixelY","handleMouseEnter","mouseEntered","handleMouseLeave","animateSlider","newEvent","params","delta","direction","isEnd","loop","animating","slideNext","raw","isBeginning","slidePrev","Date","getTime","releaseScroll","handle","event","disableParentSwiper","cssMode","preventDefault","target","$el","contains","originalEvent","rtlFactor","rtlTranslate","data","isHorizontal","Math","abs","positions","getTranslate","minTranslate","maxTranslate","nested","stopPropagation","freeMode","time","sign","length","shift","prevEvent","undefined","push","ignoreWheelEvents","loopFix","position","wasBeginning","wasEnd","setTransition","setTranslate","updateProgress","updateActiveIndex","updateSlidesClasses","sticky","clearTimeout","firstEvent","splice","snapToThreshold","slideToClosest","speed","autoplay","autoplayDisableOnInteraction","stop","returnValue","events","method","enable","wrapperEl","removeEventListener","disable","addEventListener","Object","assign"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\r\nimport { getWindow } from 'ssr-window';\r\nimport $ from '../../shared/dom.js';\r\nimport { now, nextTick } from '../../shared/utils.js';\r\nexport default function Mousewheel(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on,\r\n    emit\r\n  } = _ref;\r\n  const window = getWindow();\r\n  extendParams({\r\n    mousewheel: {\r\n      enabled: false,\r\n      releaseOnEdges: false,\r\n      invert: false,\r\n      forceToAxis: false,\r\n      sensitivity: 1,\r\n      eventsTarget: 'container',\r\n      thresholdDelta: null,\r\n      thresholdTime: null\r\n    }\r\n  });\r\n  swiper.mousewheel = {\r\n    enabled: false\r\n  };\r\n  let timeout;\r\n  let lastScrollTime = now();\r\n  let lastEventBeforeSnap;\r\n  const recentWheelEvents = [];\r\n\r\n  function normalize(e) {\r\n    // Reasonable defaults\r\n    const PIXEL_STEP = 10;\r\n    const LINE_HEIGHT = 40;\r\n    const PAGE_HEIGHT = 800;\r\n    let sX = 0;\r\n    let sY = 0; // spinX, spinY\r\n\r\n    let pX = 0;\r\n    let pY = 0; // pixelX, pixelY\r\n    // Legacy\r\n\r\n    if ('detail' in e) {\r\n      sY = e.detail;\r\n    }\r\n\r\n    if ('wheelDelta' in e) {\r\n      sY = -e.wheelDelta / 120;\r\n    }\r\n\r\n    if ('wheelDeltaY' in e) {\r\n      sY = -e.wheelDeltaY / 120;\r\n    }\r\n\r\n    if ('wheelDeltaX' in e) {\r\n      sX = -e.wheelDeltaX / 120;\r\n    } // side scrolling on FF with DOMMouseScroll\r\n\r\n\r\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\r\n      sX = sY;\r\n      sY = 0;\r\n    }\r\n\r\n    pX = sX * PIXEL_STEP;\r\n    pY = sY * PIXEL_STEP;\r\n\r\n    if ('deltaY' in e) {\r\n      pY = e.deltaY;\r\n    }\r\n\r\n    if ('deltaX' in e) {\r\n      pX = e.deltaX;\r\n    }\r\n\r\n    if (e.shiftKey && !pX) {\r\n      // if user scrolls with shift he wants horizontal scroll\r\n      pX = pY;\r\n      pY = 0;\r\n    }\r\n\r\n    if ((pX || pY) && e.deltaMode) {\r\n      if (e.deltaMode === 1) {\r\n        // delta in LINE units\r\n        pX *= LINE_HEIGHT;\r\n        pY *= LINE_HEIGHT;\r\n      } else {\r\n        // delta in PAGE units\r\n        pX *= PAGE_HEIGHT;\r\n        pY *= PAGE_HEIGHT;\r\n      }\r\n    } // Fall-back if spin cannot be determined\r\n\r\n\r\n    if (pX && !sX) {\r\n      sX = pX < 1 ? -1 : 1;\r\n    }\r\n\r\n    if (pY && !sY) {\r\n      sY = pY < 1 ? -1 : 1;\r\n    }\r\n\r\n    return {\r\n      spinX: sX,\r\n      spinY: sY,\r\n      pixelX: pX,\r\n      pixelY: pY\r\n    };\r\n  }\r\n\r\n  function handleMouseEnter() {\r\n    if (!swiper.enabled) return;\r\n    swiper.mouseEntered = true;\r\n  }\r\n\r\n  function handleMouseLeave() {\r\n    if (!swiper.enabled) return;\r\n    swiper.mouseEntered = false;\r\n  }\r\n\r\n  function animateSlider(newEvent) {\r\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\r\n      // Prevent if delta of wheel scroll delta is below configured threshold\r\n      return false;\r\n    }\r\n\r\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\r\n      // Prevent if time between scrolls is below configured threshold\r\n      return false;\r\n    } // If the movement is NOT big enough and\r\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\r\n    //   Don't go any further (avoid insignificant scroll movement).\r\n\r\n\r\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\r\n      // Return false as a default\r\n      return true;\r\n    } // If user is scrolling towards the end:\r\n    //   If the slider hasn't hit the latest slide or\r\n    //   if the slider is a loop and\r\n    //   if the slider isn't moving right now:\r\n    //     Go to next slide and\r\n    //     emit a scroll event.\r\n    // Else (the user is scrolling towards the beginning) and\r\n    // if the slider hasn't hit the first slide or\r\n    // if the slider is a loop and\r\n    // if the slider isn't moving right now:\r\n    //   Go to prev slide and\r\n    //   emit a scroll event.\r\n\r\n\r\n    if (newEvent.direction < 0) {\r\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\r\n        swiper.slideNext();\r\n        emit('scroll', newEvent.raw);\r\n      }\r\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\r\n      swiper.slidePrev();\r\n      emit('scroll', newEvent.raw);\r\n    } // If you got here is because an animation has been triggered so store the current time\r\n\r\n\r\n    lastScrollTime = new window.Date().getTime(); // Return false as a default\r\n\r\n    return false;\r\n  }\r\n\r\n  function releaseScroll(newEvent) {\r\n    const params = swiper.params.mousewheel;\r\n\r\n    if (newEvent.direction < 0) {\r\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\r\n        // Return true to animate scroll on edges\r\n        return true;\r\n      }\r\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\r\n      // Return true to animate scroll on edges\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function handle(event) {\r\n    let e = event;\r\n    let disableParentSwiper = true;\r\n    if (!swiper.enabled) return;\r\n    const params = swiper.params.mousewheel;\r\n\r\n    if (swiper.params.cssMode) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    let target = swiper.$el;\r\n\r\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\r\n      target = $(swiper.params.mousewheel.eventsTarget);\r\n    }\r\n\r\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\r\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\r\n\r\n    let delta = 0;\r\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\r\n    const data = normalize(e);\r\n\r\n    if (params.forceToAxis) {\r\n      if (swiper.isHorizontal()) {\r\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\r\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\r\n    } else {\r\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\r\n    }\r\n\r\n    if (delta === 0) return true;\r\n    if (params.invert) delta = -delta; // Get the scroll positions\r\n\r\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\r\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\r\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate(); // When loop is true:\r\n    //     the disableParentSwiper will be true.\r\n    // When loop is false:\r\n    //     if the scroll positions is not on edge,\r\n    //     then the disableParentSwiper will be true.\r\n    //     if the scroll on edge positions,\r\n    //     then the disableParentSwiper will be false.\r\n\r\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\r\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\r\n\r\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\r\n      // Register the new event in a variable which stores the relevant data\r\n      const newEvent = {\r\n        time: now(),\r\n        delta: Math.abs(delta),\r\n        direction: Math.sign(delta),\r\n        raw: event\r\n      }; // Keep the most recent events\r\n\r\n      if (recentWheelEvents.length >= 2) {\r\n        recentWheelEvents.shift(); // only store the last N events\r\n      }\r\n\r\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\r\n      recentWheelEvents.push(newEvent); // If there is at least one previous recorded event:\r\n      //   If direction has changed or\r\n      //   if the scroll is quicker than the previous one:\r\n      //     Animate the slider.\r\n      // Else (this is the first time the wheel is moved):\r\n      //     Animate the slider.\r\n\r\n      if (prevEvent) {\r\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\r\n          animateSlider(newEvent);\r\n        }\r\n      } else {\r\n        animateSlider(newEvent);\r\n      } // If it's time to release the scroll:\r\n      //   Return now so you don't hit the preventDefault.\r\n\r\n\r\n      if (releaseScroll(newEvent)) {\r\n        return true;\r\n      }\r\n    } else {\r\n      // Freemode or scrollContainer:\r\n      // If we recently snapped after a momentum scroll, then ignore wheel events\r\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\r\n      // or if it's a new scroll (larger delta or inverse sign as last event before\r\n      // an end-of-momentum snap).\r\n      const newEvent = {\r\n        time: now(),\r\n        delta: Math.abs(delta),\r\n        direction: Math.sign(delta)\r\n      };\r\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\r\n\r\n      if (!ignoreWheelEvents) {\r\n        lastEventBeforeSnap = undefined;\r\n\r\n        if (swiper.params.loop) {\r\n          swiper.loopFix();\r\n        }\r\n\r\n        let position = swiper.getTranslate() + delta * params.sensitivity;\r\n        const wasBeginning = swiper.isBeginning;\r\n        const wasEnd = swiper.isEnd;\r\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\r\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\r\n        swiper.setTransition(0);\r\n        swiper.setTranslate(position);\r\n        swiper.updateProgress();\r\n        swiper.updateActiveIndex();\r\n        swiper.updateSlidesClasses();\r\n\r\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\r\n          swiper.updateSlidesClasses();\r\n        }\r\n\r\n        if (swiper.params.freeMode.sticky) {\r\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\r\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\r\n          // 1. do all N events have decreasing or same (absolute value) delta?\r\n          // 2. did all N events arrive in the last M (M=500?) msecs?\r\n          // 3. does the earliest event have an (absolute value) delta that's\r\n          //    at least P (P=1?) larger than the most recent event's delta?\r\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\r\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\r\n          // Snap immediately and ignore remaining wheel events in this scroll.\r\n          // See comment above for \"remaining wheel events in this scroll\" determination.\r\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\r\n          clearTimeout(timeout);\r\n          timeout = undefined;\r\n\r\n          if (recentWheelEvents.length >= 15) {\r\n            recentWheelEvents.shift(); // only store the last N events\r\n          }\r\n\r\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\r\n          const firstEvent = recentWheelEvents[0];\r\n          recentWheelEvents.push(newEvent);\r\n\r\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\r\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\r\n            recentWheelEvents.splice(0);\r\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\r\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\r\n            // to wait for more events. Snap ASAP on the next tick.\r\n            // Also, because there's some remaining momentum we'll bias the snap in the\r\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\r\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\r\n            // if it's already scrolled more than 20% in the current direction, keep going.\r\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\r\n            lastEventBeforeSnap = newEvent;\r\n            recentWheelEvents.splice(0);\r\n            timeout = nextTick(() => {\r\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\r\n            }, 0); // no delay; move on next tick\r\n          }\r\n\r\n          if (!timeout) {\r\n            // if we get here, then we haven't detected the end of a momentum scroll, so\r\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\r\n            // for 500ms.\r\n            timeout = nextTick(() => {\r\n              const snapToThreshold = 0.5;\r\n              lastEventBeforeSnap = newEvent;\r\n              recentWheelEvents.splice(0);\r\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\r\n            }, 500);\r\n          }\r\n        } // Emit event\r\n\r\n\r\n        if (!ignoreWheelEvents) emit('scroll', e); // Stop autoplay\r\n\r\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop(); // Return page scroll on edge positions\r\n\r\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\r\n      }\r\n    }\r\n\r\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\r\n    return false;\r\n  }\r\n\r\n  function events(method) {\r\n    let target = swiper.$el;\r\n\r\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\r\n      target = $(swiper.params.mousewheel.eventsTarget);\r\n    }\r\n\r\n    target[method]('mouseenter', handleMouseEnter);\r\n    target[method]('mouseleave', handleMouseLeave);\r\n    target[method]('wheel', handle);\r\n  }\r\n\r\n  function enable() {\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.removeEventListener('wheel', handle);\r\n      return true;\r\n    }\r\n\r\n    if (swiper.mousewheel.enabled) return false;\r\n    events('on');\r\n    swiper.mousewheel.enabled = true;\r\n    return true;\r\n  }\r\n\r\n  function disable() {\r\n    if (swiper.params.cssMode) {\r\n      swiper.wrapperEl.addEventListener(event, handle);\r\n      return true;\r\n    }\r\n\r\n    if (!swiper.mousewheel.enabled) return false;\r\n    events('off');\r\n    swiper.mousewheel.enabled = false;\r\n    return true;\r\n  }\r\n\r\n  on('init', () => {\r\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\r\n      disable();\r\n    }\r\n\r\n    if (swiper.params.mousewheel.enabled) enable();\r\n  });\r\n  on('destroy', () => {\r\n    if (swiper.params.cssMode) {\r\n      enable();\r\n    }\r\n\r\n    if (swiper.mousewheel.enabled) disable();\r\n  });\r\n  Object.assign(swiper.mousewheel, {\r\n    enable,\r\n    disable\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}