{"ast":null,"code":"import { isObject } from '../../shared/utils.js';\nimport $ from '../../shared/dom.js';\nexport default function Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix(); // eslint-disable-next-line\n\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n    }\n\n    swiper.slideTo(slideToIndex);\n  }\n\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        } // Find actual thumbs index to slide to\n\n\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n        if (typeof prevThumbsIndex === 'undefined') {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === 'undefined') {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    } // Activate thumbs\n\n\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n  }\n\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    init();\n    update(true);\n  });\n  on('slideChange update resize observerUpdate', () => {\n    if (!swiper.thumbs.swiper) return;\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper) return;\n\n    if (swiperCreated && thumbsSwiper) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}","map":{"version":3,"sources":["C:/xampp/htdocs/melayyyyyyyy/node_modules/swiper/modules/thumbs/thumbs.js"],"names":["isObject","$","Thumb","_ref","swiper","extendParams","on","thumbs","multipleActiveThumbs","autoScrollOffset","slideThumbActiveClass","thumbsContainerClass","initialized","swiperCreated","onThumbClick","thumbsSwiper","clickedIndex","clickedSlide","hasClass","params","slideToIndex","loop","parseInt","attr","currentIndex","activeIndex","slides","eq","slideDuplicateClass","loopFix","_clientLeft","$wrapperEl","clientLeft","prevIndex","prevAll","index","nextIndex","nextAll","slideTo","init","thumbsParams","SwiperClass","constructor","Object","assign","originalParams","watchSlidesProgress","slideToClickedSlide","thumbsSwiperParams","$el","addClass","update","initial","slidesPerView","slidesPerViewDynamic","useOffset","realIndex","currentThumbsIndex","newThumbsIndex","direction","prevThumbsIndex","nextThumbsIndex","slidesPerGroup","previousIndex","visibleSlidesIndexes","indexOf","centeredSlides","Math","floor","undefined","thumbsToActivate","thumbActiveClass","removeClass","virtual","enabled","i","children","_s","duration","setTransition","destroy"],"mappings":"AAAA,SAASA,QAAT,QAAyB,uBAAzB;AACA,OAAOC,CAAP,MAAc,qBAAd;AACA,eAAe,SAASC,KAAT,CAAeC,IAAf,EAAqB;AAClC,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAKAE,EAAAA,YAAY,CAAC;AACXE,IAAAA,MAAM,EAAE;AACNH,MAAAA,MAAM,EAAE,IADF;AAENI,MAAAA,oBAAoB,EAAE,IAFhB;AAGNC,MAAAA,gBAAgB,EAAE,CAHZ;AAINC,MAAAA,qBAAqB,EAAE,2BAJjB;AAKNC,MAAAA,oBAAoB,EAAE;AALhB;AADG,GAAD,CAAZ;AASA,MAAIC,WAAW,GAAG,KAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AACAT,EAAAA,MAAM,CAACG,MAAP,GAAgB;AACdH,IAAAA,MAAM,EAAE;AADM,GAAhB;;AAIA,WAASU,YAAT,GAAwB;AACtB,UAAMC,YAAY,GAAGX,MAAM,CAACG,MAAP,CAAcH,MAAnC;AACA,QAAI,CAACW,YAAL,EAAmB;AACnB,UAAMC,YAAY,GAAGD,YAAY,CAACC,YAAlC;AACA,UAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,QAAIA,YAAY,IAAIhB,CAAC,CAACgB,YAAD,CAAD,CAAgBC,QAAhB,CAAyBd,MAAM,CAACe,MAAP,CAAcZ,MAAd,CAAqBG,qBAA9C,CAApB,EAA0F;AAC1F,QAAI,OAAOM,YAAP,KAAwB,WAAxB,IAAuCA,YAAY,KAAK,IAA5D,EAAkE;AAClE,QAAII,YAAJ;;AAEA,QAAIL,YAAY,CAACI,MAAb,CAAoBE,IAAxB,EAA8B;AAC5BD,MAAAA,YAAY,GAAGE,QAAQ,CAACrB,CAAC,CAACc,YAAY,CAACE,YAAd,CAAD,CAA6BM,IAA7B,CAAkC,yBAAlC,CAAD,EAA+D,EAA/D,CAAvB;AACD,KAFD,MAEO;AACLH,MAAAA,YAAY,GAAGJ,YAAf;AACD;;AAED,QAAIZ,MAAM,CAACe,MAAP,CAAcE,IAAlB,EAAwB;AACtB,UAAIG,YAAY,GAAGpB,MAAM,CAACqB,WAA1B;;AAEA,UAAIrB,MAAM,CAACsB,MAAP,CAAcC,EAAd,CAAiBH,YAAjB,EAA+BN,QAA/B,CAAwCd,MAAM,CAACe,MAAP,CAAcS,mBAAtD,CAAJ,EAAgF;AAC9ExB,QAAAA,MAAM,CAACyB,OAAP,GAD8E,CAC5D;;AAElBzB,QAAAA,MAAM,CAAC0B,WAAP,GAAqB1B,MAAM,CAAC2B,UAAP,CAAkB,CAAlB,EAAqBC,UAA1C;AACAR,QAAAA,YAAY,GAAGpB,MAAM,CAACqB,WAAtB;AACD;;AAED,YAAMQ,SAAS,GAAG7B,MAAM,CAACsB,MAAP,CAAcC,EAAd,CAAiBH,YAAjB,EAA+BU,OAA/B,CAAwC,6BAA4Bd,YAAa,IAAjF,EAAsFO,EAAtF,CAAyF,CAAzF,EAA4FQ,KAA5F,EAAlB;AACA,YAAMC,SAAS,GAAGhC,MAAM,CAACsB,MAAP,CAAcC,EAAd,CAAiBH,YAAjB,EAA+Ba,OAA/B,CAAwC,6BAA4BjB,YAAa,IAAjF,EAAsFO,EAAtF,CAAyF,CAAzF,EAA4FQ,KAA5F,EAAlB;AACA,UAAI,OAAOF,SAAP,KAAqB,WAAzB,EAAsCb,YAAY,GAAGgB,SAAf,CAAtC,KAAoE,IAAI,OAAOA,SAAP,KAAqB,WAAzB,EAAsChB,YAAY,GAAGa,SAAf,CAAtC,KAAoE,IAAIG,SAAS,GAAGZ,YAAZ,GAA2BA,YAAY,GAAGS,SAA9C,EAAyDb,YAAY,GAAGgB,SAAf,CAAzD,KAAuFhB,YAAY,GAAGa,SAAf;AAChO;;AAED7B,IAAAA,MAAM,CAACkC,OAAP,CAAelB,YAAf;AACD;;AAED,WAASmB,IAAT,GAAgB;AACd,UAAM;AACJhC,MAAAA,MAAM,EAAEiC;AADJ,QAEFpC,MAAM,CAACe,MAFX;AAGA,QAAIP,WAAJ,EAAiB,OAAO,KAAP;AACjBA,IAAAA,WAAW,GAAG,IAAd;AACA,UAAM6B,WAAW,GAAGrC,MAAM,CAACsC,WAA3B;;AAEA,QAAIF,YAAY,CAACpC,MAAb,YAA+BqC,WAAnC,EAAgD;AAC9CrC,MAAAA,MAAM,CAACG,MAAP,CAAcH,MAAd,GAAuBoC,YAAY,CAACpC,MAApC;AACAuC,MAAAA,MAAM,CAACC,MAAP,CAAcxC,MAAM,CAACG,MAAP,CAAcH,MAAd,CAAqByC,cAAnC,EAAmD;AACjDC,QAAAA,mBAAmB,EAAE,IAD4B;AAEjDC,QAAAA,mBAAmB,EAAE;AAF4B,OAAnD;AAIAJ,MAAAA,MAAM,CAACC,MAAP,CAAcxC,MAAM,CAACG,MAAP,CAAcH,MAAd,CAAqBe,MAAnC,EAA2C;AACzC2B,QAAAA,mBAAmB,EAAE,IADoB;AAEzCC,QAAAA,mBAAmB,EAAE;AAFoB,OAA3C;AAID,KAVD,MAUO,IAAI/C,QAAQ,CAACwC,YAAY,CAACpC,MAAd,CAAZ,EAAmC;AACxC,YAAM4C,kBAAkB,GAAGL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAY,CAACpC,MAA/B,CAA3B;AACAuC,MAAAA,MAAM,CAACC,MAAP,CAAcI,kBAAd,EAAkC;AAChCF,QAAAA,mBAAmB,EAAE,IADW;AAEhCC,QAAAA,mBAAmB,EAAE;AAFW,OAAlC;AAIA3C,MAAAA,MAAM,CAACG,MAAP,CAAcH,MAAd,GAAuB,IAAIqC,WAAJ,CAAgBO,kBAAhB,CAAvB;AACAnC,MAAAA,aAAa,GAAG,IAAhB;AACD;;AAEDT,IAAAA,MAAM,CAACG,MAAP,CAAcH,MAAd,CAAqB6C,GAArB,CAAyBC,QAAzB,CAAkC9C,MAAM,CAACe,MAAP,CAAcZ,MAAd,CAAqBI,oBAAvD;AACAP,IAAAA,MAAM,CAACG,MAAP,CAAcH,MAAd,CAAqBE,EAArB,CAAwB,KAAxB,EAA+BQ,YAA/B;AACA,WAAO,IAAP;AACD;;AAED,WAASqC,MAAT,CAAgBC,OAAhB,EAAyB;AACvB,UAAMrC,YAAY,GAAGX,MAAM,CAACG,MAAP,CAAcH,MAAnC;AACA,QAAI,CAACW,YAAL,EAAmB;AACnB,UAAMsC,aAAa,GAAGtC,YAAY,CAACI,MAAb,CAAoBkC,aAApB,KAAsC,MAAtC,GAA+CtC,YAAY,CAACuC,oBAAb,EAA/C,GAAqFvC,YAAY,CAACI,MAAb,CAAoBkC,aAA/H;AACA,UAAM5C,gBAAgB,GAAGL,MAAM,CAACe,MAAP,CAAcZ,MAAd,CAAqBE,gBAA9C;AACA,UAAM8C,SAAS,GAAG9C,gBAAgB,IAAI,CAACM,YAAY,CAACI,MAAb,CAAoBE,IAA3D;;AAEA,QAAIjB,MAAM,CAACoD,SAAP,KAAqBzC,YAAY,CAACyC,SAAlC,IAA+CD,SAAnD,EAA8D;AAC5D,UAAIE,kBAAkB,GAAG1C,YAAY,CAACU,WAAtC;AACA,UAAIiC,cAAJ;AACA,UAAIC,SAAJ;;AAEA,UAAI5C,YAAY,CAACI,MAAb,CAAoBE,IAAxB,EAA8B;AAC5B,YAAIN,YAAY,CAACW,MAAb,CAAoBC,EAApB,CAAuB8B,kBAAvB,EAA2CvC,QAA3C,CAAoDH,YAAY,CAACI,MAAb,CAAoBS,mBAAxE,CAAJ,EAAkG;AAChGb,UAAAA,YAAY,CAACc,OAAb,GADgG,CACxE;;AAExBd,UAAAA,YAAY,CAACe,WAAb,GAA2Bf,YAAY,CAACgB,UAAb,CAAwB,CAAxB,EAA2BC,UAAtD;AACAyB,UAAAA,kBAAkB,GAAG1C,YAAY,CAACU,WAAlC;AACD,SAN2B,CAM1B;;;AAGF,cAAMmC,eAAe,GAAG7C,YAAY,CAACW,MAAb,CAAoBC,EAApB,CAAuB8B,kBAAvB,EAA2CvB,OAA3C,CAAoD,6BAA4B9B,MAAM,CAACoD,SAAU,IAAjG,EAAsG7B,EAAtG,CAAyG,CAAzG,EAA4GQ,KAA5G,EAAxB;AACA,cAAM0B,eAAe,GAAG9C,YAAY,CAACW,MAAb,CAAoBC,EAApB,CAAuB8B,kBAAvB,EAA2CpB,OAA3C,CAAoD,6BAA4BjC,MAAM,CAACoD,SAAU,IAAjG,EAAsG7B,EAAtG,CAAyG,CAAzG,EAA4GQ,KAA5G,EAAxB;;AAEA,YAAI,OAAOyB,eAAP,KAA2B,WAA/B,EAA4C;AAC1CF,UAAAA,cAAc,GAAGG,eAAjB;AACD,SAFD,MAEO,IAAI,OAAOA,eAAP,KAA2B,WAA/B,EAA4C;AACjDH,UAAAA,cAAc,GAAGE,eAAjB;AACD,SAFM,MAEA,IAAIC,eAAe,GAAGJ,kBAAlB,KAAyCA,kBAAkB,GAAGG,eAAlE,EAAmF;AACxFF,UAAAA,cAAc,GAAG3C,YAAY,CAACI,MAAb,CAAoB2C,cAApB,GAAqC,CAArC,GAAyCD,eAAzC,GAA2DJ,kBAA5E;AACD,SAFM,MAEA,IAAII,eAAe,GAAGJ,kBAAlB,GAAuCA,kBAAkB,GAAGG,eAAhE,EAAiF;AACtFF,UAAAA,cAAc,GAAGG,eAAjB;AACD,SAFM,MAEA;AACLH,UAAAA,cAAc,GAAGE,eAAjB;AACD;;AAEDD,QAAAA,SAAS,GAAGvD,MAAM,CAACqB,WAAP,GAAqBrB,MAAM,CAAC2D,aAA5B,GAA4C,MAA5C,GAAqD,MAAjE;AACD,OAzBD,MAyBO;AACLL,QAAAA,cAAc,GAAGtD,MAAM,CAACoD,SAAxB;AACAG,QAAAA,SAAS,GAAGD,cAAc,GAAGtD,MAAM,CAAC2D,aAAxB,GAAwC,MAAxC,GAAiD,MAA7D;AACD;;AAED,UAAIR,SAAJ,EAAe;AACbG,QAAAA,cAAc,IAAIC,SAAS,KAAK,MAAd,GAAuBlD,gBAAvB,GAA0C,CAAC,CAAD,GAAKA,gBAAjE;AACD;;AAED,UAAIM,YAAY,CAACiD,oBAAb,IAAqCjD,YAAY,CAACiD,oBAAb,CAAkCC,OAAlC,CAA0CP,cAA1C,IAA4D,CAArG,EAAwG;AACtG,YAAI3C,YAAY,CAACI,MAAb,CAAoB+C,cAAxB,EAAwC;AACtC,cAAIR,cAAc,GAAGD,kBAArB,EAAyC;AACvCC,YAAAA,cAAc,GAAGA,cAAc,GAAGS,IAAI,CAACC,KAAL,CAAWf,aAAa,GAAG,CAA3B,CAAjB,GAAiD,CAAlE;AACD,WAFD,MAEO;AACLK,YAAAA,cAAc,GAAGA,cAAc,GAAGS,IAAI,CAACC,KAAL,CAAWf,aAAa,GAAG,CAA3B,CAAjB,GAAiD,CAAlE;AACD;AACF,SAND,MAMO,IAAIK,cAAc,GAAGD,kBAAjB,IAAuC1C,YAAY,CAACI,MAAb,CAAoB2C,cAApB,KAAuC,CAAlF,EAAqF,CAAC;AAC5F;;AAED/C,QAAAA,YAAY,CAACuB,OAAb,CAAqBoB,cAArB,EAAqCN,OAAO,GAAG,CAAH,GAAOiB,SAAnD;AACD;AACF,KA1DsB,CA0DrB;;;AAGF,QAAIC,gBAAgB,GAAG,CAAvB;AACA,UAAMC,gBAAgB,GAAGnE,MAAM,CAACe,MAAP,CAAcZ,MAAd,CAAqBG,qBAA9C;;AAEA,QAAIN,MAAM,CAACe,MAAP,CAAckC,aAAd,GAA8B,CAA9B,IAAmC,CAACjD,MAAM,CAACe,MAAP,CAAc+C,cAAtD,EAAsE;AACpEI,MAAAA,gBAAgB,GAAGlE,MAAM,CAACe,MAAP,CAAckC,aAAjC;AACD;;AAED,QAAI,CAACjD,MAAM,CAACe,MAAP,CAAcZ,MAAd,CAAqBC,oBAA1B,EAAgD;AAC9C8D,MAAAA,gBAAgB,GAAG,CAAnB;AACD;;AAEDA,IAAAA,gBAAgB,GAAGH,IAAI,CAACC,KAAL,CAAWE,gBAAX,CAAnB;AACAvD,IAAAA,YAAY,CAACW,MAAb,CAAoB8C,WAApB,CAAgCD,gBAAhC;;AAEA,QAAIxD,YAAY,CAACI,MAAb,CAAoBE,IAApB,IAA4BN,YAAY,CAACI,MAAb,CAAoBsD,OAApB,IAA+B1D,YAAY,CAACI,MAAb,CAAoBsD,OAApB,CAA4BC,OAA3F,EAAoG;AAClG,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,gBAApB,EAAsCK,CAAC,IAAI,CAA3C,EAA8C;AAC5C5D,QAAAA,YAAY,CAACgB,UAAb,CAAwB6C,QAAxB,CAAkC,6BAA4BxE,MAAM,CAACoD,SAAP,GAAmBmB,CAAE,IAAnF,EAAwFzB,QAAxF,CAAiGqB,gBAAjG;AACD;AACF,KAJD,MAIO;AACL,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,gBAApB,EAAsCK,CAAC,IAAI,CAA3C,EAA8C;AAC5C5D,QAAAA,YAAY,CAACW,MAAb,CAAoBC,EAApB,CAAuBvB,MAAM,CAACoD,SAAP,GAAmBmB,CAA1C,EAA6CzB,QAA7C,CAAsDqB,gBAAtD;AACD;AACF;AACF;;AAEDjE,EAAAA,EAAE,CAAC,YAAD,EAAe,MAAM;AACrB,UAAM;AACJC,MAAAA;AADI,QAEFH,MAAM,CAACe,MAFX;AAGA,QAAI,CAACZ,MAAD,IAAW,CAACA,MAAM,CAACH,MAAvB,EAA+B;AAC/BmC,IAAAA,IAAI;AACJY,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAPC,CAAF;AAQA7C,EAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACnD,QAAI,CAACF,MAAM,CAACG,MAAP,CAAcH,MAAnB,EAA2B;AAC3B+C,IAAAA,MAAM;AACP,GAHC,CAAF;AAIA7C,EAAAA,EAAE,CAAC,eAAD,EAAkB,CAACuE,EAAD,EAAKC,QAAL,KAAkB;AACpC,UAAM/D,YAAY,GAAGX,MAAM,CAACG,MAAP,CAAcH,MAAnC;AACA,QAAI,CAACW,YAAL,EAAmB;AACnBA,IAAAA,YAAY,CAACgE,aAAb,CAA2BD,QAA3B;AACD,GAJC,CAAF;AAKAxE,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxB,UAAMS,YAAY,GAAGX,MAAM,CAACG,MAAP,CAAcH,MAAnC;AACA,QAAI,CAACW,YAAL,EAAmB;;AAEnB,QAAIF,aAAa,IAAIE,YAArB,EAAmC;AACjCA,MAAAA,YAAY,CAACiE,OAAb;AACD;AACF,GAPC,CAAF;AAQArC,EAAAA,MAAM,CAACC,MAAP,CAAcxC,MAAM,CAACG,MAArB,EAA6B;AAC3BgC,IAAAA,IAD2B;AAE3BY,IAAAA;AAF2B,GAA7B;AAID","sourcesContent":["import { isObject } from '../../shared/utils.js';\r\nimport $ from '../../shared/dom.js';\r\nexport default function Thumb(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    thumbs: {\r\n      swiper: null,\r\n      multipleActiveThumbs: true,\r\n      autoScrollOffset: 0,\r\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\r\n      thumbsContainerClass: 'swiper-thumbs'\r\n    }\r\n  });\r\n  let initialized = false;\r\n  let swiperCreated = false;\r\n  swiper.thumbs = {\r\n    swiper: null\r\n  };\r\n\r\n  function onThumbClick() {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper) return;\r\n    const clickedIndex = thumbsSwiper.clickedIndex;\r\n    const clickedSlide = thumbsSwiper.clickedSlide;\r\n    if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\r\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\r\n    let slideToIndex;\r\n\r\n    if (thumbsSwiper.params.loop) {\r\n      slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\r\n    } else {\r\n      slideToIndex = clickedIndex;\r\n    }\r\n\r\n    if (swiper.params.loop) {\r\n      let currentIndex = swiper.activeIndex;\r\n\r\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\r\n        swiper.loopFix(); // eslint-disable-next-line\r\n\r\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\r\n        currentIndex = swiper.activeIndex;\r\n      }\r\n\r\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\r\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\r\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\r\n    }\r\n\r\n    swiper.slideTo(slideToIndex);\r\n  }\r\n\r\n  function init() {\r\n    const {\r\n      thumbs: thumbsParams\r\n    } = swiper.params;\r\n    if (initialized) return false;\r\n    initialized = true;\r\n    const SwiperClass = swiper.constructor;\r\n\r\n    if (thumbsParams.swiper instanceof SwiperClass) {\r\n      swiper.thumbs.swiper = thumbsParams.swiper;\r\n      Object.assign(swiper.thumbs.swiper.originalParams, {\r\n        watchSlidesProgress: true,\r\n        slideToClickedSlide: false\r\n      });\r\n      Object.assign(swiper.thumbs.swiper.params, {\r\n        watchSlidesProgress: true,\r\n        slideToClickedSlide: false\r\n      });\r\n    } else if (isObject(thumbsParams.swiper)) {\r\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\r\n      Object.assign(thumbsSwiperParams, {\r\n        watchSlidesProgress: true,\r\n        slideToClickedSlide: false\r\n      });\r\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\r\n      swiperCreated = true;\r\n    }\r\n\r\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\r\n    swiper.thumbs.swiper.on('tap', onThumbClick);\r\n    return true;\r\n  }\r\n\r\n  function update(initial) {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper) return;\r\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\r\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\r\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\r\n\r\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\r\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\r\n      let newThumbsIndex;\r\n      let direction;\r\n\r\n      if (thumbsSwiper.params.loop) {\r\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\r\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\r\n\r\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\r\n          currentThumbsIndex = thumbsSwiper.activeIndex;\r\n        } // Find actual thumbs index to slide to\r\n\r\n\r\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\r\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\r\n\r\n        if (typeof prevThumbsIndex === 'undefined') {\r\n          newThumbsIndex = nextThumbsIndex;\r\n        } else if (typeof nextThumbsIndex === 'undefined') {\r\n          newThumbsIndex = prevThumbsIndex;\r\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\r\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\r\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\r\n          newThumbsIndex = nextThumbsIndex;\r\n        } else {\r\n          newThumbsIndex = prevThumbsIndex;\r\n        }\r\n\r\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\r\n      } else {\r\n        newThumbsIndex = swiper.realIndex;\r\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\r\n      }\r\n\r\n      if (useOffset) {\r\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\r\n      }\r\n\r\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\r\n        if (thumbsSwiper.params.centeredSlides) {\r\n          if (newThumbsIndex > currentThumbsIndex) {\r\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\r\n          } else {\r\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\r\n          }\r\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\r\n        }\r\n\r\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\r\n      }\r\n    } // Activate thumbs\r\n\r\n\r\n    let thumbsToActivate = 1;\r\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\r\n\r\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\r\n      thumbsToActivate = swiper.params.slidesPerView;\r\n    }\r\n\r\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\r\n      thumbsToActivate = 1;\r\n    }\r\n\r\n    thumbsToActivate = Math.floor(thumbsToActivate);\r\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\r\n\r\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\r\n      for (let i = 0; i < thumbsToActivate; i += 1) {\r\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < thumbsToActivate; i += 1) {\r\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  on('beforeInit', () => {\r\n    const {\r\n      thumbs\r\n    } = swiper.params;\r\n    if (!thumbs || !thumbs.swiper) return;\r\n    init();\r\n    update(true);\r\n  });\r\n  on('slideChange update resize observerUpdate', () => {\r\n    if (!swiper.thumbs.swiper) return;\r\n    update();\r\n  });\r\n  on('setTransition', (_s, duration) => {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper) return;\r\n    thumbsSwiper.setTransition(duration);\r\n  });\r\n  on('beforeDestroy', () => {\r\n    const thumbsSwiper = swiper.thumbs.swiper;\r\n    if (!thumbsSwiper) return;\r\n\r\n    if (swiperCreated && thumbsSwiper) {\r\n      thumbsSwiper.destroy();\r\n    }\r\n  });\r\n  Object.assign(swiper.thumbs, {\r\n    init,\r\n    update\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}